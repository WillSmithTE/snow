{"version":3,"sources":["victory.js","api.js","App.js","serviceWorker.js","index.js"],"names":["InteractiveLegend","props","state","hiddenSeries","Set","series","this","map","_","idx","childName","target","eventKey","String","eventHandlers","onClick","mutation","delete","add","setState","onMouseOver","style","strokeWidth","fillOpacity","onMouseOut","height","events","buildEvents","dependentAxis","s","line","has","key","name","data","datapoints","dp","x","y","fill","color","stroke","itemsPerRow","item","symbol","React","api","getSpencersCreek","a","fetch","response","json","jsonResponse","defaults","dateTransformer","date","momentDate","moment","year","firstDayOfYear","diff","App","useState","undefined","setData","useEffect","then","replace","Math","random","toString","concat","snow","console","error","thing","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f7f247c3.chunk.js","sourcesContent":["import * as React from 'react';\nimport { VictoryArea, VictoryChart, VictoryLegend, VictoryAxis, VictoryTooltip, VictoryLabel } from 'victory';\n\n\nconst toVictoryData = (line) => {\n    return line.datapoints.map(dp => ({\n        name: line.name,\n        x: dp.x,\n        y: dp.y\n    }));\n};\n\nconst toVictoryLegend = (line) => {\n    return line.color ? {\n        name: line.name,\n        symbol: {\n            fill: line.color\n        }\n    } : { name: line.name };\n};\n\nexport default class InteractiveLegend extends React.Component {\n    series;\n\n    constructor(props) {\n        super(props);\n        this.state = { hiddenSeries: new Set() };\n        this.series = props.series;\n    }\n\n    buildEvents() {\n        return this.series.map((_, idx) => {\n            return {\n                childName: ['legend'],\n                target: ['data', 'labels'],\n                eventKey: String(idx),\n                eventHandlers: {\n                    onClick: () => {\n                        return [\n                            {\n                                childName: ['area-' + idx],\n                                target: 'data',\n                                eventKey: 'all',\n                                mutation: () => {\n                                    if (!this.state.hiddenSeries.delete(idx)) {\n                                        // Was not already hidden => add to set\n                                        this.state.hiddenSeries.add(idx);\n                                    }\n                                    this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n                                    return null;\n                                }\n                            }\n                        ];\n                    },\n                    onMouseOver: () => {\n                        return [\n                            {\n                                childName: ['area-' + idx],\n                                target: 'data',\n                                eventKey: 'all',\n                                mutation: props => {\n                                    return {\n                                        style: { ...props.style, strokeWidth: 4, fillOpacity: 0.5 }\n                                    };\n                                }\n                            }\n                        ];\n                    },\n                    onMouseOut: () => {\n                        return [\n                            {\n                                childName: ['area-' + idx],\n                                target: 'data',\n                                eventKey: 'all',\n                                mutation: () => {\n                                    return null;\n                                }\n                            }\n                        ];\n                    }\n                }\n            };\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <VictoryChart\n                    height={200}\n                    events={this.buildEvents()}\n                    // domain={{x: [0, 365], y: [0, 200]}}\n                >\n                    <VictoryAxis />\n                    <VictoryAxis dependentAxis={true} />\n                    {this.series.map((s, idx) => {\n                        if (this.state.hiddenSeries.has(idx)) {\n                            return undefined;\n                        }\n                        return (\n                            <VictoryArea\n                                key={'area-' + idx}\n                                name={'area-' + idx}\n                                data={toVictoryData(s)}\n                                style={{\n                                    data: {\n                                        fill: s.color,\n                                        fillOpacity: 0.2,\n                                        stroke: s.color,\n                                        strokeWidth: 2\n                                    }\n                                }}\n                            />\n                        );\n                    })}\n                    <VictoryLegend\n                    itemsPerRow={5}\n                        name={'legend'}\n                        data={this.series.map((s, idx) => {\n                            const item = toVictoryLegend(s);\n                            if (this.state.hiddenSeries.has(idx)) {\n                                return { ...item, symbol: { fill: '#999' } };\n                            }\n                            return item;\n                        })}\n                        height={10}\n                    />\n                </VictoryChart>\n            </div>\n        );\n    }\n}\n","const BASE_URL = process.env.NODE_ENV === 'development' ? \n'http://localhost:5000' : 'https://ski-be-hgfltltt5a-de.a.run.app/'\n\nexport const api = {\n    getSpencersCreek: async () => {\n        const response = await fetch(`${BASE_URL}/api/spencersCreek/a`);\n        const jsonResponse = await response.json();\n        return jsonResponse;    \n    }\n}","import React, { useEffect } from 'react';\nimport InteractiveLegend from './victory';\nimport moment from 'moment';\nimport { api } from './api';\n\nconst defaults = [\n    { x: 0, y: 0 },\n    { x: 365, y: 0 },\n];\nconst dummyResponse = [\n    {\n        year: 1976,\n        data: [\n            { date: '1976-11-28', snow: 56 },\n            { date: '1976-12-15', snow: 100 },\n            { date: '1976-12-30', snow: 10 },\n        ]\n    },\n    {\n        year: 1977,\n        data: [\n            { date: '1977-11-28', snow: 80 },\n            { date: '1977-12-15', snow: 200 },\n            { date: '1977-12-30', snow: 15 },\n        ]\n    },\n    {\n        year: 1978,\n        data: [\n            { date: '1978-11-28', snow: 15 },\n            { date: '1978-12-01', snow: 250 },\n            { date: '1978-12-30', snow: 8 },\n        ]\n    },\n];\n\nfunction App() {\n\n    const [data, setData] = React.useState(undefined);\n    useEffect(() => {\n        api.getSpencersCreek().then((response) => {\n\n            const data = response\n                .map(({ year, data }) => {\n                    return {\n                        name: year,\n                        color: getRandomColour(),\n                        datapoints: defaults.concat(data.map(({ date, snow }) => ({ x: dateTransformer(date), y: snow })))\n                    }\n                });\n            console.error(data.map((thing) => thing.datapoints))\n            setData(data)\n        });\n    }, []);\n    return data ? <InteractiveLegend series={data} /> : <h1>Loading...</h1>;\n}\n\nfunction getRandomColour() {\n    return \"#000000\".replace(/0/g, function () { return (~~(Math.random() * 16)).toString(16); });\n}\n\nexport function dateTransformer(date) {\n    const momentDate = moment(date, 'YYYY-MM-DD');\n    const year = momentDate.year();\n    const firstDayOfYear = moment(year + '-01-01', 'YYYY-MM-DD');\n    return momentDate.diff(firstDayOfYear, 'days');\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}