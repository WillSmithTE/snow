{"version":3,"sources":["victory.js","App.js","serviceWorker.js","index.js"],"names":["InteractiveLegend","props","state","hiddenSeries","Set","series","name","color","datapoints","x","y","this","map","_","idx","childName","target","eventKey","String","eventHandlers","onClick","mutation","delete","add","setState","onMouseOver","style","strokeWidth","fillOpacity","onMouseOut","height","events","buildEvents","s","line","has","key","data","dp","fill","stroke","item","symbol","React","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0SAqBqBA,E,kDAGjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAAEC,aAAc,IAAIC,KACjC,EAAKC,OAAS,CACV,CACIC,KAAM,OACNC,MAAO,OACPC,WAAY,CAAC,CAAEC,EAAG,EAAGC,EAAG,GAAK,CAAED,EAAG,EAAGC,EAAG,GAAK,CAAED,EAAG,EAAGC,EAAG,KAE5D,CACIJ,KAAM,OACNC,MAAO,OACPC,WAAY,CAAC,CAAEC,EAAG,EAAGC,EAAG,GAAK,CAAED,EAAG,EAAGC,EAAG,GAAK,CAAED,EAAG,EAAGC,EAAG,KAE5D,CACIJ,KAAM,QACNC,MAAO,OACPC,WAAY,CAAC,CAAEC,EAAG,EAAGC,EAAG,GAAK,CAAED,EAAG,EAAGC,EAAG,GAAK,CAAED,EAAG,EAAGC,EAAG,MAjBjD,E,0DAsBJ,IAAD,OACV,OAAOC,KAAKN,OAAOO,KAAI,SAACC,EAAGC,GACvB,MAAO,CACHC,UAAW,CAAC,UACZC,OAAQ,CAAC,OAAQ,UACjBC,SAAUC,OAAOJ,GACjBK,cAAe,CACXC,QAAS,WACL,MAAO,CACH,CACIL,UAAW,CAAC,QAAUD,GACtBE,OAAQ,OACRC,SAAU,MACVI,SAAU,WAMN,OALK,EAAKnB,MAAMC,aAAamB,OAAOR,IAEhC,EAAKZ,MAAMC,aAAaoB,IAAIT,GAEhC,EAAKU,SAAS,CAAErB,aAAc,IAAIC,IAAI,EAAKF,MAAMC,gBAC1C,SAKvBsB,YAAa,WACT,MAAO,CACH,CACIV,UAAW,CAAC,QAAUD,GACtBE,OAAQ,OACRC,SAAU,MACVI,SAAU,SAAApB,GACN,MAAO,CACHyB,MAAM,eAAMzB,EAAMyB,MAAb,CAAoBC,YAAa,EAAGC,YAAa,UAM1EC,WAAY,WACR,MAAO,CACH,CACId,UAAW,CAAC,QAAUD,GACtBE,OAAQ,OACRC,SAAU,MACVI,SAAU,WACN,OAAO,gB,+BAU7B,IAAD,OACL,OACI,2BACI,gBAAC,IAAD,CACIS,OAAQ,IACRC,OAAQpB,KAAKqB,eAEb,gBAAC,IAAD,MACCrB,KAAKN,OAAOO,KAAI,SAACqB,EAAGnB,GAzGnB,IAACoB,EA0GC,IAAI,EAAKhC,MAAMC,aAAagC,IAAIrB,GAGhC,OACI,gBAAC,IAAD,CACIsB,IAAK,QAAUtB,EACfR,KAAM,QAAUQ,EAChBuB,MAjHTH,EAiH6BD,EAhHzCC,EAAK1B,WAAWI,KAAI,SAAA0B,GAAE,MAAK,CAC9BhC,KAAM4B,EAAK5B,KACXG,EAAG6B,EAAG7B,EACNC,EAAG4B,EAAG5B,OA8GkBgB,MAAO,CACHW,KAAM,CACFE,KAAMN,EAAE1B,MACRqB,YAAa,GACbY,OAAQP,EAAE1B,MACVoB,YAAa,SAMjC,gBAAC,IAAD,CACIrB,KAAM,SACN+B,KAAM1B,KAAKN,OAAOO,KAAI,SAACqB,EAAGnB,GACtB,IAxHHoB,EAwHSO,GAxHTP,EAwHgCD,GAvHzC1B,MAAQ,CAChBD,KAAM4B,EAAK5B,KACXoC,OAAQ,CACJH,KAAML,EAAK3B,QAEf,CAAED,KAAM4B,EAAK5B,MAmHO,OAAI,EAAKJ,MAAMC,aAAagC,IAAIrB,GACrB,eAAK2B,EAAZ,CAAkBC,OAAQ,CAAEH,KAAM,UAE/BE,KAEXX,OAAQ,W,GArHea,aCdhCC,MAJf,WACI,OAAO,kBAAC,EAAD,OCQSC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.395e6129.chunk.js","sourcesContent":["import * as React from 'react';\nimport { VictoryArea, VictoryChart, VictoryLegend, VictoryAxis } from 'victory';\n\n\nconst toVictoryData = (line) => {\n    return line.datapoints.map(dp => ({\n        name: line.name,\n        x: dp.x,\n        y: dp.y\n    }));\n};\n\nconst toVictoryLegend = (line) => {\n    return line.color ? {\n        name: line.name,\n        symbol: {\n            fill: line.color\n        }\n    } : { name: line.name };\n};\n\nexport default class InteractiveLegend extends React.Component {\n    series;\n\n    constructor(props) {\n        super(props);\n        this.state = { hiddenSeries: new Set() };\n        this.series = [\n            {\n                name: 'cats',\n                color: '#c33',\n                datapoints: [{ x: 0, y: 5 }, { x: 1, y: 8 }, { x: 2, y: 5 }]\n            },\n            {\n                name: 'dogs',\n                color: '#3c3',\n                datapoints: [{ x: 0, y: 2 }, { x: 1, y: 4 }, { x: 2, y: 6 }]\n            },\n            {\n                name: 'birds',\n                color: '#33c',\n                datapoints: [{ x: 0, y: 3 }, { x: 1, y: 1 }, { x: 2, y: 3 }]\n            }\n        ];\n    }\n\n    buildEvents() {\n        return this.series.map((_, idx) => {\n            return {\n                childName: ['legend'],\n                target: ['data', 'labels'],\n                eventKey: String(idx),\n                eventHandlers: {\n                    onClick: () => {\n                        return [\n                            {\n                                childName: ['area-' + idx],\n                                target: 'data',\n                                eventKey: 'all',\n                                mutation: () => {\n                                    if (!this.state.hiddenSeries.delete(idx)) {\n                                        // Was not already hidden => add to set\n                                        this.state.hiddenSeries.add(idx);\n                                    }\n                                    this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n                                    return null;\n                                }\n                            }\n                        ];\n                    },\n                    onMouseOver: () => {\n                        return [\n                            {\n                                childName: ['area-' + idx],\n                                target: 'data',\n                                eventKey: 'all',\n                                mutation: props => {\n                                    return {\n                                        style: { ...props.style, strokeWidth: 4, fillOpacity: 0.5 }\n                                    };\n                                }\n                            }\n                        ];\n                    },\n                    onMouseOut: () => {\n                        return [\n                            {\n                                childName: ['area-' + idx],\n                                target: 'data',\n                                eventKey: 'all',\n                                mutation: () => {\n                                    return null;\n                                }\n                            }\n                        ];\n                    }\n                }\n            };\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <VictoryChart\n                    height={200}\n                    events={this.buildEvents()}\n                >\n                    <VictoryAxis />\n                    {this.series.map((s, idx) => {\n                        if (this.state.hiddenSeries.has(idx)) {\n                            return undefined;\n                        }\n                        return (\n                            <VictoryArea\n                                key={'area-' + idx}\n                                name={'area-' + idx}\n                                data={toVictoryData(s)}\n                                style={{\n                                    data: {\n                                        fill: s.color,\n                                        fillOpacity: 0.2,\n                                        stroke: s.color,\n                                        strokeWidth: 2\n                                    }\n                                }}\n                            />\n                        );\n                    })}\n                    <VictoryLegend\n                        name={'legend'}\n                        data={this.series.map((s, idx) => {\n                            const item = toVictoryLegend(s);\n                            if (this.state.hiddenSeries.has(idx)) {\n                                return { ...item, symbol: { fill: '#999' } };\n                            }\n                            return item;\n                        })}\n                        height={90}\n                    />\n                </VictoryChart>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport InteractiveLegend from './victory';\n\nfunction App() {\n    return <InteractiveLegend/>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}