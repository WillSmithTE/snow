{"version":3,"sources":["App.styled.js","FormatSelector.js","api.js","Error.js","Loading.js","victory.js","colours.js","dateTransformer.js","PlaceGraph.js","YearsComparer.js","PlacesComparer.js","App.js","serviceWorker.js","index.js"],"names":["FlexBox","styled","div","AppWrapper","FormatSelector","handleChange","format","FormControl","component","RadioGroup","value","onChange","FormControlLabel","control","Radio","label","cache","api","getSnowDepth","a","fetch","response","json","jsonResponse","Error","style","color","Loading","width","textAlign","CircularProgress","margin","months","firstDay","altLabel","InteractiveLegend","props","state","hiddenSeries","Set","this","series","map","_","idx","childName","target","eventKey","String","eventHandlers","onClick","mutation","delete","add","setState","onMouseOver","strokeWidth","fillOpacity","onMouseOut","height","events","buildEvents","containerComponent","labels","y","datum","radius","labelComponent","centerOffset","x","fontSize","grid","stroke","tickLabels","tickValues","tickFormat","day","month","find","isSouthernHemisphere","dependentAxis","snow","s","line","has","key","name","data","datapoints","dp","fill","orientation","itemsPerRow","item","symbol","cursor","React","distinctColours","convertDateToDayOfYear","date","momentDate","moment","subtract","year","firstDayOfYear","diff","PlaceGraph","placeName","defaultYears","length","useState","selectedYears","setSelectedYears","handleCheckboxChange","checked","selectedYearsCopy","graphData","index","yearData","flexGrow","filter","minWidth","FormLabel","FormGroup","display","flexFlow","maxHeight","overflow","alignContent","reverse","YearCheckbox","Checkbox","YearsComparer","undefined","setData","error","setError","useEffect","then","place","PlacesComparer","App","setFormat","event","fallback","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.5ebda05e.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const FlexBox = styled.div`\n    display: flex;\n    flex-direction: row;\n    padding: 10px;\n    flex-wrap: wrap;\n    justify-content: space-between;\n`;\n\nexport const AppWrapper = styled.div`\n    display: flex;\n    padding: 20px;\n    flex-direction: column;\n`;","import React from 'react';\nimport { FormControl, FormControlLabel, RadioGroup, Radio } from '@material-ui/core';\n\nexport const FormatSelector = ({handleChange, format}) => {\n    return <FormControl component=\"fieldset\">\n        <RadioGroup value={format} onChange={handleChange}>\n            <FormControlLabel value=\"years\" control={<Radio />} label=\"Compare years\" />\n            <FormControlLabel value=\"resorts\" control={<Radio />} label=\"Compare resorts\" />\n        </RadioGroup>\n    </FormControl>\n};","const BASE_URL = process.env.NODE_ENV === 'development' ?\n    'http://localhost:5000' : 'https://ski-be-hgfltltt5a-de.a.run.app'\n\nconst cache = {};\n\nexport const api = {\n    getSnowDepth: async () => {\n        if (cache.getSnowDepth) {\n            return cache.getSnowDepth;\n        } else {\n            const response = await fetch(`${BASE_URL}/api/snowDepth`);\n            const jsonResponse = await response.json();\n            cache.getSnowDepth = jsonResponse;\n            return jsonResponse;\n        }\n    }\n}","import React from 'react';\n\nexport const Error = () => {\n    return <div style={{color: 'red'}}>\n        <h3>Oops, something went wrong. Please try refreshing the page or come back later. Sorry about that</h3>\n    </div>;\n};","import React from 'react';\nimport { CircularProgress } from '@material-ui/core';\n\nexport const Loading = () => {\n    return <div style={{width: '100%', textAlign: 'center'}}>\n                <h3>Loading...</h3>\n        <CircularProgress style={{ margin: '0 auto' }} />\n    </div>;\n};","import * as React from 'react';\nimport { VictoryArea, VictoryChart, VictoryLegend, VictoryAxis, VictoryVoronoiContainer, VictoryTooltip } from 'victory';\n\n\nconst toVictoryData = (line) => {\n    return line.datapoints.map(dp => ({\n        name: line.name,\n        x: dp.x,\n        y: dp.y\n    }));\n};\n\nconst toVictoryLegend = (line) => {\n    return line.color ? {\n        name: line.name,\n        symbol: {\n            fill: line.color\n        }\n    } : { name: line.name };\n};\n\nconst months = [\n    {\n        firstDay: 1,\n        label: 'Jan',\n        altLabel: 'July',\n    },\n    {\n        firstDay: 32,\n        label: 'Feb',\n        altLabel: 'Aug',\n    },\n    {\n        firstDay: 60,\n        label: 'Mar',\n        altLabel: 'Sept',\n    },\n    {\n        firstDay: 91,\n        label: 'Apr',\n        altLabel: 'Oct',\n    },\n    {\n        firstDay: 121,\n        label: 'May',\n        altLabel: 'Nov',\n    },\n    {\n        firstDay: 152,\n        label: 'June',\n        altLabel: 'Dec',\n    },\n    {\n        firstDay: 182,\n        label: 'July',\n        altLabel: 'Jan',\n    },\n    {\n        firstDay: 213,\n        label: 'Aug',\n        altLabel: 'Feb',\n    },\n    {\n        firstDay: 244,\n        label: 'Sept',\n        altLabel: 'Mar',\n    },\n    {\n        firstDay: 274,\n        label: 'Oct',\n        altLabel: 'Apr',\n    },\n    {\n        firstDay: 305,\n        label: 'Nov',\n        altLabel: 'May',\n    },\n    {\n        firstDay: 335,\n        label: 'Dec',\n        altLabel: 'June',\n    },\n    {\n        firstDay: 366,\n        label: '',\n        altLabel: '',\n    }\n];\n\nexport default class InteractiveLegend extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { hiddenSeries: new Set() };\n    }\n\n    buildEvents() {\n        return this.props.series.map((_, idx) => {\n            return {\n                childName: ['legend'],\n                target: ['data', 'labels'],\n                eventKey: String(idx),\n                eventHandlers: {\n                    onClick: () => {\n                        return [\n                            {\n                                childName: ['area-' + idx],\n                                target: 'data',\n                                eventKey: 'all',\n                                mutation: () => {\n                                    if (!this.state.hiddenSeries.delete(idx)) {\n                                        // Was not already hidden => add to set\n                                        this.state.hiddenSeries.add(idx);\n                                    }\n                                    this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n                                    return null;\n                                }\n                            }\n                        ];\n                    },\n                    onMouseOver: () => {\n                        return [\n                            {\n                                childName: ['area-' + idx],\n                                target: 'data',\n                                eventKey: 'all',\n                                mutation: props => {\n                                    return {\n                                        style: { ...props.style, strokeWidth: 4, fillOpacity: 0.5 }\n                                    };\n                                }\n                            }\n                        ];\n                    },\n                    onMouseOut: () => {\n                        return [\n                            {\n                                childName: ['area-' + idx],\n                                target: 'data',\n                                eventKey: 'all',\n                                mutation: () => {\n                                    return null;\n                                }\n                            }\n                        ];\n                    }\n                }\n            };\n        });\n    }\n\n    render() {\n\n        return (\n            <div>\n                <VictoryChart\n                    height={200}\n                    events={this.buildEvents()}\n                    containerComponent={\n                        <VictoryVoronoiContainer\n                            labels={({ datum: { y } }) => `${y}cm`}\n                            radius={5}\n                            labelComponent={<VictoryTooltip\n                                centerOffset={{ x: 5 }}\n                                style={{fontSize: '6px'}}\n                            />}\n                        />\n                    }\n                // domain={{ x: [1, 365], y: [0, 350] }}\n                >\n                    <VictoryAxis\n                        style={{\n                            grid: { stroke: \"#818e99\", strokeWidth: 0.5 },\n                            tickLabels: { fontSize: 8 },\n                        }}\n                        tickValues={months.map(({ firstDay }) => firstDay)}\n                        tickFormat={(day) => {\n                            const month = months.find(({ firstDay }) => firstDay === day);\n                            return this.props.isSouthernHemisphere ? month.label : month.altLabel\n                        }}\n                    />\n                    <VictoryAxis\n                        style={{\n                            grid: { stroke: \"#818e99\", strokeWidth: 0.5 },\n                            tickLabels: { fontSize: 8 },\n                        }}\n                        dependentAxis={true} tickFormat={(snow) => `${snow}cm`}\n\n                    />\n                    {this.props.series.map((s, idx) => {\n                        if (this.state.hiddenSeries.has(idx)) {\n                            return undefined;\n                        }\n                        return (\n                            <VictoryArea\n                                key={'area-' + idx}\n                                name={'area-' + idx}\n                                data={toVictoryData(s)}\n                                style={{\n                                    data: {\n                                        fill: s.color,\n                                        fillOpacity: 0.2,\n                                        stroke: s.color,\n                                        strokeWidth: 2\n                                    }\n                                }}\n                            />\n                        );\n                    })}\n                    <VictoryLegend\n                        orientation='horizontal'\n                        itemsPerRow={6}\n                        name={'legend'}\n                        data={this.props.series.map((s, idx) => {\n                            const item = toVictoryLegend(s);\n                            if (this.state.hiddenSeries.has(idx)) {\n                                return { ...item, symbol: { fill: '#999' } };\n                            }\n                            return item;\n                        })}\n                        height={10}\n                        style={{\n                            labels: { fontSize: 8, cursor: 'pointer' }\n                        }}\n                    />\n                </VictoryChart>\n            </div>\n        );\n    }\n}\n","// colours from here https://mokole.com/palette.html\n\nexport const distinctColours = [\n    '#556b2f',\n    '#2f4f4f',\n    '#dcdcdc',\n    '#d2691e',\n    '#4682b4',\n    '#3cb371',\n    '#808000',\n    '#708090',\n    '#006400',\n    '#191970',\n    '#7f0000',\n    '#ffb6c1',\n    '#ff69b4',\n    '#7fffd4',\n    '#ff1493',\n    '#87ceeb',\n    '#90ee90',\n    '#dda0dd',\n    '#fa8072',\n    '#f0e68c',\n    '#db7093',\n    '#1e90ff',\n    '#ff00ff',\n    '#da70d6',\n    '#ff6347',\n    '#adff2f',\n    '#a020f0',\n    '#0000ff',\n    '#9370db',\n    '#f4a460',\n    '#00bfff',\n    '#00ffff',\n    '#dc143c',\n    '#00ff7f',\n    '#00ff00',\n    '#deb887',\n    '#0000cd',\n    '#ffff00',\n    '#ffd700',\n    '#ff8c00',\n    '#ff4500',\n    '#9932cc',\n    '#8b008b',\n    '#8fbc8f',\n    '#daa520',\n    '#32cd32',\n    '#00008b',\n    '#20b2aa',\n    '#9acd32',\n];\n\nexport function getRandomColour() {\n    return \"#000000\".replace(/0/g, function () { return (~~(Math.random() * 16)).toString(16); });\n}","import moment from 'moment';\n\nexport function convertDateToDayOfYear(date, isSouthernHemisphere) {\n    let momentDate = moment(date, 'YYYY-MM-DD');\n    if (!isSouthernHemisphere) {\n        momentDate.subtract(6, 'months');\n    }\n    const year = momentDate.year();\n    const firstDayOfYear = moment(year + '-01-01', 'YYYY-MM-DD');\n    return momentDate.diff(firstDayOfYear, 'days');\n}\n","import React from 'react';\nimport InteractiveLegend from './victory';\nimport { FlexBox } from './App.styled';\nimport { Checkbox, FormControlLabel, FormGroup, FormLabel } from '@material-ui/core';\nimport { distinctColours } from './colours';\nimport { convertDateToDayOfYear } from './dateTransformer';\n\nexport const PlaceGraph = ({ data, placeName, isSouthernHemisphere }) => {\n\n    const defaultYears = {\n        [data[data.length - 1].year]: true,\n        [data[data.length - 2].year]: true,\n    };\n\n    const [selectedYears, setSelectedYears] = React.useState(defaultYears);\n\n    const showYear = (year) => {\n        return selectedYears[year];\n    };\n\n    const handleCheckboxChange = ({ target: { name, checked } }) => {\n        const selectedYearsCopy = { ...selectedYears };\n        selectedYearsCopy[name] = checked;\n        setSelectedYears(selectedYearsCopy);\n    };\n\n    const graphData = data\n        .map(({ year, yearData }, index) => {\n            return {\n                name: year,\n                color: distinctColours[index],\n                datapoints: yearData.map(({ date, snow }) => ({ x: convertDateToDayOfYear(date, isSouthernHemisphere), y: snow }))\n            }\n        });\n\n    const filteredData = () => {\n        return graphData.filter(({ name }) => showYear(name));\n    };\n\n\n    return <FlexBox>\n        <div style={{ flexGrow: 1 }}>\n            <h2>{placeName} Snow Depth</h2>\n            <InteractiveLegend series={filteredData()} isSouthernHemisphere={isSouthernHemisphere} />\n        </div>\n        {graphData && <div style={{ minWidth: '300px' }}>\n            <FormLabel >Years</FormLabel>\n            <FormGroup label='Years' style={{ display: 'flex', flexFlow: 'column wrap', maxHeight: '680px', overflow: 'auto', alignContent: 'flex-start', width: '300px' }}>\n                {[...graphData].reverse().map(({ name }) => <YearCheckbox year={name} selectedYears={selectedYears} handleCheckboxChange={handleCheckboxChange} key={name}/>)}\n            </FormGroup>\n        </div>}\n    </FlexBox>;\n}\n\nconst YearCheckbox = ({ selectedYears, handleCheckboxChange, year }) => {\n    return <FormControlLabel\n        control={<Checkbox\n            checked={selectedYears[year]}\n            onChange={handleCheckboxChange}\n            name={year}\n            style={{ color: 'black' }}\n        />}\n        label={year}\n    />\n}\n","import React, { useEffect } from 'react';\nimport { api } from './api';\nimport { Error } from './Error';\nimport { Loading } from './Loading';\nimport { PlaceGraph } from './PlaceGraph';\n\nexport const YearsComparer = () => {\n\n    const [data, setData] = React.useState(undefined);\n    const [error, setError] = React.useState(false);\n\n    useEffect(() => {\n        api.getSnowDepth().then(\n            setData,\n            () => setError(true)\n        );\n    }, []);\n\n    return <>\n        {error && <Error />}\n        {data ?\n            data.map(({ data, place, isSouthernHemisphere }) =>\n                <PlaceGraph data={data} placeName={place} isSouthernHemisphere={isSouthernHemisphere} key={place} />\n            ) :\n            <Loading />\n        }\n    </>;\n\n};","import React from 'react';\n\nexport const PlacesComparer = () => {\n    return <h1>Coming soon!</h1>;\n};","import React, { Suspense, useState } from 'react';\nimport { AppWrapper } from './App.styled';\nimport { FormatSelector } from './FormatSelector';\nimport { YearsComparer } from './YearsComparer';\nimport { PlacesComparer } from './PlacesComparer';\nimport { Loading } from './Loading';\n\nfunction App() {\n\n    const [format, setFormat] = useState('years');\n\n    const handleChangeFormat = (event) => {\n        setFormat(event.target.value);\n    };\n\n    return <AppWrapper>\n        <h1>SnowTrack</h1>\n        <FormatSelector format={format} handleChange={handleChangeFormat} />\n        <Suspense fallback={<Loading />}>\n            {format === 'years' ? <YearsComparer /> : <PlacesComparer />}\n        </Suspense>\n    </AppWrapper>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}